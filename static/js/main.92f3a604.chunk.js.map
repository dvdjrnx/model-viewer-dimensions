{"version":3,"sources":["App.js","index.js"],"names":["App","viewerRef","useRef","modelUrl","setModelUrl","useState","dimensions","setDimensions","viewer","_jsx","src","id","ref","cameraControls","useEffect","storedViewer","current","loadHandler","x","y","z","getDimensions","dimensionString","concat","toFixed","console","timeEnd","addEventListener","removeEventListener","className","children","_jsxs","onDrop","event","time","preventDefault","file","dataTransfer","files","modelObjectUrl","URL","createObjectURL","onDragOver","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"6MAiEeA,MA7Df,WACE,MAAMC,EAAYC,iBAAO,OAClBC,EAAUC,GAAeC,mBAAS,KAClCC,EAAYC,GAAiBF,mBAAS,IAEvCG,EACJC,cAAA,gBACEC,IAAKP,EACLQ,GAAG,SACHC,IAAKX,EACLY,gBAAc,IAwClB,OApCAC,qBAAU,KACR,GAAIX,EAAU,CACZ,MAAMY,EAAed,EAAUe,QAEzBC,EAAcA,KAClB,MAAM,EAACC,EAAC,EAAEC,EAAC,EAAEC,GAAKL,EAAaM,gBACzBC,EAAe,MAAAC,OAASL,EAAEM,QAAQ,GAAE,UAAAD,OAASJ,EAAEK,QACnD,GACD,UAAAD,OAASH,EAAEI,QAAQ,GAAE,KAEtBjB,EAAce,GACdG,QAAQC,QAAQ,kBAKlB,OAFAX,EAAaY,iBAAiB,OAAQV,GAE/B,KACLF,EAAaa,oBAAoB,OAAQX,OAG5C,CAACd,IAiBFM,cAAA,OAAKoB,UAAU,MAAKC,SAClBC,eAAA,OAAKpB,GAAG,YAAYqB,OAhBxB,SAAqBC,GACnBR,QAAQS,KAAK,iBACbD,EAAME,iBAEN,MAAMC,EAAOH,EAAMI,aAAaC,MAAM,GAChCC,EAAiBC,IAAIC,gBAAgBL,GAE3ChC,EAAYmC,IAS+BG,WAN7C,SAAyBT,GACvBA,EAAME,kBAKiEL,SAAA,CACnErB,cAAA,KAAAqB,SAAG,wDACFxB,EACAH,EAAWK,EAAS,WCrD7BmC,IAASC,OACPnC,cAACoC,IAAMC,WAAU,CAAAhB,SACfrB,cAACT,EAAG,MAEN+C,SAASC,eAAe,U","file":"static/js/main.92f3a604.chunk.js","sourcesContent":["import {useEffect, useRef, useState} from 'react';\nimport './App.css';\nimport '@google/model-viewer';\n\nfunction App() {\n  const viewerRef = useRef(null);\n  const [modelUrl, setModelUrl] = useState('');\n  const [dimensions, setDimensions] = useState('');\n\n  const viewer = (\n    <model-viewer\n      src={modelUrl}\n      id=\"viewer\"\n      ref={viewerRef}\n      cameraControls\n    ></model-viewer>\n  );\n\n  useEffect(() => {\n    if (modelUrl) {\n      const storedViewer = viewerRef.current;\n\n      const loadHandler = () => {\n        const {x, y, z} = storedViewer.getDimensions();\n        const dimensionString = `x: ${x.toFixed(2)}m, y: ${y.toFixed(\n          2,\n        )}m, z: ${z.toFixed(2)}m`;\n\n        setDimensions(dimensionString);\n        console.timeEnd('getDimensions');\n      };\n\n      storedViewer.addEventListener('load', loadHandler);\n\n      return () => {\n        storedViewer.removeEventListener('load', loadHandler);\n      };\n    }\n  }, [modelUrl]);\n\n  function dropHandler(event) {\n    console.time('getDimensions');\n    event.preventDefault();\n\n    const file = event.dataTransfer.files[0];\n    const modelObjectUrl = URL.createObjectURL(file);\n\n    setModelUrl(modelObjectUrl);\n  }\n\n  function dragOverHandler(event) {\n    event.preventDefault();\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"drop_zone\" onDrop={dropHandler} onDragOver={dragOverHandler}>\n        <p>Drop a GLB file in this Drop Zone for dimensions...</p>\n        {dimensions}\n        {modelUrl ? viewer : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}